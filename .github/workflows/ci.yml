name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: windows-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run type checking
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm run test:coverage
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
    
    - name: Test XML generation
      run: npm run build-xml
    
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: |
          dist/
          unattended/build/
        retention-days: 7

  powershell-test:
    runs-on: windows-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Test PowerShell scripts syntax
      run: |
        Get-ChildItem -Path "scripts" -Filter "*.ps1" | ForEach-Object {
          Write-Host "Testing $($_.Name)"
          $null = Get-Command -Syntax $_.FullName
        }
    
    - name: Test main orchestration script
      run: |
        # Test script help and parameter validation
        powershell -File run.ps1 -? 2>&1 | Out-Null
        if ($LASTEXITCODE -ne 0) { 
          Write-Error "run.ps1 help failed"
          exit 1
        }
    
    - name: Test prerequisites check
      run: |
        # Mock prerequisites test (without actual execution)
        $testScript = @"
        # Load functions from run.ps1 without executing main logic
        . .\run.ps1 -WhatIf
        Test-Prerequisites
        "@
        Invoke-Expression $testScript

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: npm audit --audit-level=moderate
    
    - name: Run security scan with Snyk
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  docs-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation completeness
      run: |
        # Check if all scripts have corresponding documentation
        find scripts/ -name "*.ps1" | while read script; do
          script_name=$(basename "$script" .ps1)
          if ! grep -q "$script_name" README.md; then
            echo "Warning: $script_name not documented in README.md"
          fi
        done
    
    - name: Validate markdown
      uses: articulate/actions-markdownlint@v1
      with:
        config: .markdownlint.json
        files: '**/*.md'

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: windows-latest
    needs: [test, powershell-test, security-scan, docs-check]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Run Release Please
      uses: google-github-actions/release-please-action@v4
      with:
        release-type: node
        package-name: cloudit-usb-automations
        config-file: release-please-config.json
        manifest-file: .release-please-manifest.json
